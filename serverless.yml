service: TFG-Booking-application

plugins:
  - serverless-offline
  - serverless-offline-scheduler
  - serverless-export-env
  - serverless-python-requirements
  - serverless-s3-deploy

provider:
  name: aws
  runtime: python3.11
  endpointType: REGIONAL
  memorySize: 512
  timeout: 15
  region: eu-west-3
  deploymentMethod: direct
  stage: ${opt:stage, 'develop'}
  profile: ${opt:aws-profile, 'booking_cli'}

  ecr:
    images:
      schedulercontainer:
        path: .
        file: Dockerfile.scheduler
      apicontainer:
        path: .
        file: Dockerfile.api
      testcontainer:
        path: .
        file: Dockerfile.test
      

  apiGateway:
    apiKeys:
      - MiApiKey
 
  environment:
    AWS_STAGE: ${self:provider.stage}
    AWS_SERVICE: ${self:service}
    CHATGPT_API_KEY: ${ssm:/chatgptKey}
    SES_EMAIL_SENDER_ADDRESS: ${self:custom.sesEmailSenderAddress}
    BOOKING_EXTRANER_USER: ${self:custom.booking_extranet_user}
    BOOKING_EXTRANER_PASSWORD: ${ssm:/booking_extranet_password}
    S3_BUCKET_STORAGE: ${self:custom.s3BucketStorageName}
    CF_DOMAIN: ${self:custom.cloudFrontDomainName}

  iam:
    role:
      statements:
        # SES Permissions
        - Effect: Allow
          Action:
            - ses:SendEmail
          Resource: '*'

        # LAMBDA Permissions
        - Effect: Allow
          Action:
            - lambda:GetFunction
            - lambda:RemovePermission
          Resource: '*'
        # SSM Permissions
        - Effect: Allow
          Action:
            - ssm:GetParameter
          Resource:
            - "*"
        # DYNAMODB Permissions
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - '*'
        # S3 Permissions
        - Effect: Allow
          Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:PutObject
            - s3:GetObjectTagging
            - s3:PutObjectTagging
            - s3:DeleteObject
          Resource: "*"


custom:
  appEnvironment: ${file(serverless_resources/environment.yml):environment.${self:provider.stage}}
  # APP SECURITY
  appSecurity: ${self:custom.appEnvironment.appSecurity}

  # SES
  sesEmailSenderAddress: alech.maria@hotmail.com
  sesEmailSenderArn: arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${self:custom.sesEmailSenderAddress}

  # BOOKING EXTRANET
  booking_extranet_user: Alejandro_Sanchez

  # S3 BUCKETS
  s3BucketAppName: tfg-booking-application.webapp.${self:provider.stage}
  s3BucketStorageName: tfg-booking-application.storage.${self:provider.stage}

  # ROUTE53
  route53DomainName: ${self:custom.appEnvironment.route53DomainName}

  # CLOUDFRONT
  cloudFrontDomainName: app.${self:custom.route53DomainName}
  cloudFrontHostedZoneId: ${self:custom.appEnvironment.cloudFrontHostedZoneId}

  # [GENERATOR] CERTIFICATE + DOMAIN
  customDomain: ${file(serverless_resources/aws_route53.yml)}

  # UPLOADING FRONTEND TO S3
  assets:
    auto: true
    targets:
      - bucket: 
          Ref: S3BucketApp
        files:
          - source: ./frontend2/dist/frontend2/browser/
            globs: '**/*'

package:
  individually: true
  excludeDevDependencies: false
  patterns:
    - '!**/**'
    - 'application/**'

functions:
  pruebacontainer:
    image:
      name: testcontainer
    name: pruebaContainer
    timeout: 180 
    memorySize: 1024 

  scheduler:
    image:
      name: schedulercontainer
    name: ${self:service}-handler-scheduler
    events:
      #- schedule:
          #rate: rate(60 minutes)
          #input:
            #task: get_properties
      #- schedule:
          #rate: rate(60 minutes)
          #input:
            #task: get_reservations
      #- schedule:
          #rate: rate(60 minutes)
          #input:
            #task: get_chats

      #- schedule:
          #rate: rate(60 minutes)
          #input:
            #task: get_properties_scraped
      #- schedule:
          #rate: rate(60 minutes)
          #input:
            #task: get_reservations_scraped
      #- schedule:
          #rate: rate(60 minutes)
          #input:
            #task: get_chats_scraped
         
  #schedulerScrapTest:
    #handler: application/functions/scraping/get_properties.miprueba
    #name: ${self:service}-handler-schedulerScrapTest
    #memorySize: 512
    #layers:
      #- ${cf:${self:service}-requirements-${self:provider.stage}.PythonRequirementsLambdaLayerQualifiedArn}
    #events:
      #- schedule:
          #rate: rate(2 minutes)
          #input:
            #task: get_properties

  api:
    image:
      name: apicontainer
    name: ${self:service}-handler-api
    memorySize: 512
    events:
      - http:
          path: api/reservations
          method: get
          cors: true
          private: true
      - http:
          path: api/reservations
          method: post
          cors: true
          private: true
      - http:
          path: api/reservations
          method: patch
          cors: true
          private: true
      - http:
          path: api/reservations
          method: delete
          cors: true
          private: true
      - http:
          path: api/chats
          method: get
          cors: true
          private: true
      - http:
          path: api/chats
          method: post
          cors: true
          private: true
      - http:
          path: api/chats
          method: patch
          cors: true
          private: true
      - http:
          path: api/chats
          method: delete
          cors: true
          private: true
      - http:
          path: api/chat
          method: GET
          cors: true
          private: true
      - http:
          path: api/chat
          method: POST
          cors: true
          private: true
      - http:
          path: api/properties
          method: get
          cors: true
          private: true
      - http:
          path: api/properties
          method: post
          cors: true
          private: true
      - http:
          path: api/properties
          method: patch
          cors: true
          private: true
      - http:
          path: api/properties
          method: delete
          cors: true
          private: true

resources:
  # Dynamodb
  - ${file(serverless_resources/dynamodb.yml)}
  # S3 Buckets
  - ${file(serverless_resources/aws_s3.yml)}
  # Cloudfront
  - ${file(serverless_resources/aws_cloudfront.yml)}

