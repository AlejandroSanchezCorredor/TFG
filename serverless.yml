service: TFG-Booking-application
# tfg-booking-application

plugins:
  - serverless-offline
  - serverless-offline-scheduler
  - serverless-export-env
  - serverless-python-requirements

provider:
  name: aws
  runtime: python3.11
  endpointType: REGIONAL
  memorySize: 512
  timeout: 15
  region: eu-west-3
  deploymentMethod: direct
  stage: ${opt:stage, 'develop'}
  profile: ${opt:aws-profile, 'booking_cli'}

  ecr:
    images:
      schedulercontainer:
        path: .
        file: Dockerfile.scheduler
      apicontainer:
        path: .
        file: Dockerfile.api
      #testcontainer:
        #path: .
        #file: Dockerfile.test
      

  apiGateway:
    apiKeys:
      - MiApiKey
 
  environment:
    AWS_STAGE: ${self:provider.stage}
    AWS_SERVICE: ${self:service}
    CHATGPT_API_KEY: ${ssm:/chatgptKey}
    COGNITO_USER_POOL_ID: !Ref CognitoUserPool
    COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
    SES_EMAIL_SENDER_ADDRESS: ${self:custom.sesEmailSenderAddress}
    BOOKING_EXTRANER_USER: ${self:custom.booking_extranet_user}
    BOOKING_EXTRANER_PASSWORD: ${ssm:/booking_extranet_password}

  iam:
    role:
      statements:
        # COGNITO Permissions

        - Effect: Allow
          Action:
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:AdminDisableUser
            - cognito-idp:AdminEnableUser
            - cognito-idp:AdminDeleteUser
            - cognito-idp:AdminDeleteUserAttributes
            - cognito-idp:AdminLinkProviderForUser
            - cognito-idp:AdminUserGlobalSignOut
            - cognito-idp:AdminListGroupsForUser
            - cognito-idp:AdminRemoveUserFromGroup
            - cognito-idp:AdminAddUserToGroup
            - cognito-idp:ListGroups
          Resource: !GetAtt CognitoUserPool.Arn
        # SES Permissions
        - Effect: Allow
          Action:
            - ses:SendEmail
          Resource: '*'

        # LAMBDA Permissions
        - Effect: Allow
          Action:
            - lambda:GetFunction
            - lambda:RemovePermission
          Resource: '*'
        # SSM Permissions
        - Effect: Allow
          Action:
            - ssm:GetParameter
          Resource:
            - "*"
        # DYNAMODB Permissions
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - '*'
        # S3 Permissions
        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - '*'


custom:
  appEnvironment: ${file(serverless_resources/environment.yml):environment.${self:provider.stage}}
  # APP SECURITY
  appSecurity: ${self:custom.appEnvironment.appSecurity}

  # COGNITO POOLS
  cognitoUserPoolName: ${self:service}-user-pool
  cognitoIdentityPoolName: ${self:service}_indentity_pool
  cognitoUserPoolClientName: ${self:custom.cognitoUserPoolName}-client

  # SES
  sesEmailSenderAddress: alech.maria@hotmail.com
  sesEmailSenderArn: arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${self:custom.sesEmailSenderAddress}

  # BOOKING EXTRANET
  booking_extranet_user: Alejandro_Sanchez

package:
  individually: true
  excludeDevDependencies: false
  patterns:
    - '!**/**'
    - 'application/**'

functions:
  #pruebacontainer:
    #image:
      #name: testcontainer
    #name: pruebaContainer
    #timeout: 180 
    #memorySize: 1024 

  scheduler:
    image:
      name: schedulercontainer
    name: ${self:service}-handler-scheduler
    events:
      #- schedule:
          #rate: rate(60 minutes)
          #input:
            #task: get_properties
      #- schedule:
          #rate: rate(60 minutes)
          #input:
            #task: get_reservations
      #- schedule:
          #rate: rate(60 minutes)
          #input:
            #task: get_chats

      #- schedule:
          #rate: rate(60 minutes)
          #input:
            #task: get_properties_scraped
      #- schedule:
          #rate: rate(60 minutes)
          #input:
            #task: get_reservations_scraped
      #- schedule:
          #rate: rate(60 minutes)
          #input:
            #task: get_chats_scraped
         
  #schedulerScrapTest:
    #handler: application/functions/scraping/get_properties.miprueba
    #name: ${self:service}-handler-schedulerScrapTest
    #memorySize: 512
    #layers:
      #- ${cf:${self:service}-requirements-${self:provider.stage}.PythonRequirementsLambdaLayerQualifiedArn}
    #events:
      #- schedule:
          #rate: rate(2 minutes)
          #input:
            #task: get_properties
  

  api:
    image:
      name: apicontainer
    name: ${self:service}-handler-api
    memorySize: 512
    events:
      - http:
          path: api/reservations
          method: get
          cors: true
          private: true
      - http:
          path: api/reservations
          method: post
          cors: true
          private: true
      - http:
          path: api/reservations
          method: patch
          cors: true
          private: true
      - http:
          path: api/reservations
          method: delete
          cors: true
          private: true
      - http:
          path: api/chats
          method: get
          cors: true
          private: true
      - http:
          path: api/chats
          method: post
          cors: true
          private: true
      - http:
          path: api/chats
          method: patch
          cors: true
          private: true
      - http:
          path: api/chats
          method: delete
          cors: true
          private: true
      - http:
          path: api/properties
          method: get
          cors: true
          private: true
      - http:
          path: api/properties
          method: post
          cors: true
          private: true
      - http:
          path: api/properties
          method: patch
          cors: true
          private: true
      - http:
          path: api/properties
          method: delete
          cors: true
          private: true
   
  # TRIGGERS ===========================================================================================================

  CognitoPreVerificationTrigger:
    handler: application/functions/triggers/cognito_triggers.pre_verification_trigger
    name: ${self:service}-cognito-pre-verification-trigger
    maximumRetryAttempts: 1
    dependsOn:
      - CognitoUserPool
    events:
      - cognitoUserPool:
          pool: ${self:custom.cognitoUserPoolName}
          trigger: CustomMessage
          existing: true
          forceDeploy: true
    package:
      individually: true
      patterns:
        - '!application/**'
        - 'application/configuration.py'
        - 'application/core/configuration_loader.py'
        - 'application/core/aws/ssm.py'
        - 'application/core/mail/mail_handler.py'
        - 'application/core/mail/templates/snipets/*.*'
        - 'application/core/mail/templates/cognito_*.*'
        - 'application/functions/triggers/cognito_triggers.py'

  #CognitoPreSignUpTrigger:
    #handler: application/functions/triggers/cognito_triggers.pre_sign_up_trigger
    #name: ${self:service}-cognito-pre-sign-up-trigger
    #maximumRetryAttempts: 1
    #dependsOn:
      #- CognitoUserPool
    #events:
      #- cognitoUserPool:
          #pool: ${self:custom.cognitoUserPoolName}
          #trigger: PreSignUp
          #existing: true
          #forceDeploy: true
    #package:
      #individually: true
      #patterns:
        #- '!application/**'
        #- 'application/configuration.py'
        #- 'application/core/configuration_loader.py'
        #- 'application/core/aws/ssm.py'
        #- 'application/core/aws/cognito.py'
        #- 'application/functions/triggers/cognito_triggers.py'

  #CognitoPreTokenGenerationTrigger:
    #handler: application/functions/triggers/cognito_triggers.pre_token_generation_trigger
    #name: ${self:service}-cognito-pre-token-generation-trigger
    #layers:
      #- ${cf:${self:service}-requirements-${self:provider.stage}.PythonRequirementsLambdaLayerQualifiedArn}
    #maximumRetryAttempts: 1
    #dependsOn:
      #- CognitoUserPool
   # events:
      #- cognitoUserPool:
        #  pool: ${self:custom.cognitoUserPoolName}
        # trigger: PreTokenGeneration
        #  existing: true
         # forceDeploy: true

resources:
  # Dynamodb
  - ${file(serverless_resources/dynamodb.yml)}
  # API Gateway
  #- ${file(serverless_resources/aws_api_gateway.yml)}
  # Cognito Authentication
  - ${file(serverless_resources/aws_cognito.yml)}

